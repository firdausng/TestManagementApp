// <auto-generated />
using System;
using Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Scenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid?>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScenarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Feature", b =>
                {
                    b.HasOne("AppCore.Domain.Entities.TestRepository.Project", "Project")
                        .WithMany("FeatureList")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Scenario", b =>
                {
                    b.HasOne("AppCore.Domain.Entities.TestRepository.Feature", "Feature")
                        .WithMany("Scenarios")
                        .HasForeignKey("FeatureId");

                    b.HasOne("AppCore.Domain.Entities.TestRepository.Project", "Project")
                        .WithMany("ScenarioList")
                        .HasForeignKey("ProjectId");

                    b.OwnsMany("AppCore.Domain.Entities.TestRepository.Step", "StepsList", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid?>("ScenarioId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Status")
                                .HasColumnType("text");

                            b1.HasKey("OwnerId", "Id");

                            b1.HasIndex("ScenarioId");

                            b1.ToTable("Step");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");

                            b1.HasOne("AppCore.Domain.Entities.TestRepository.Scenario", "Scenario")
                                .WithMany()
                                .HasForeignKey("ScenarioId");

                            b1.Navigation("Scenario");
                        });

                    b.Navigation("Feature");

                    b.Navigation("Project");

                    b.Navigation("StepsList");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Tag", b =>
                {
                    b.HasOne("AppCore.Domain.Entities.TestRepository.Feature", null)
                        .WithMany("TagsList")
                        .HasForeignKey("FeatureId");

                    b.HasOne("AppCore.Domain.Entities.TestRepository.Project", "Project")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId");

                    b.HasOne("AppCore.Domain.Entities.TestRepository.Scenario", null)
                        .WithMany("TagsList")
                        .HasForeignKey("ScenarioId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Feature", b =>
                {
                    b.Navigation("Scenarios");

                    b.Navigation("TagsList");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Project", b =>
                {
                    b.Navigation("FeatureList");

                    b.Navigation("ScenarioList");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("AppCore.Domain.Entities.TestRepository.Scenario", b =>
                {
                    b.Navigation("TagsList");
                });
#pragma warning restore 612, 618
        }
    }
}
